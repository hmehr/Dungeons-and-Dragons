package View.Map;

import Model.Map.StaticMapCellList;
import Controller.Map.ComboBoxActionListener;
import Model.Map.Map;
import Controls.CustomListView.ListItemModel;
import Controls.CustomListView.ListItemRender;
import Controls.CustomListView.ListViewTransferHandler;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MapEditor.java
 *
 * Created on 2011-9-27, 21:01:06
 */
/**
 *
 * @author eric
 */

/**
 * This class MapEditor inherit JFrame.
 * MapEditor method can create the new form of MapEditor.
 * And do the new action in the _menuItemNewActionPerformed.
 * Open the action's file in the _menuItemOpenActionPerformed and save the 
 * actions in the _menuItemSaveActionPerformed.
 * 
 * @author yukywang
 */
public class MapEditor extends javax.swing.JFrame
{

    private Map _mapModel = null;
    MapView _mapView = new MapView();
    private MapSetDialog _mapSetDialog = new MapSetDialog(this, true, 2, 10);

    /** Creates new form MapEditor */
    public MapEditor()
    {
        initComponents();

        this._rightPanel.add(_mapView);
        Set itemSet = StaticMapCellList.getInstance().getKeys();
        for (int num = 0; num < itemSet.size(); num++)
        {
            this._comboBoxCatelog.addItem(itemSet.toArray()[itemSet.size() - num - 1]);
        }
        ListItemModel itemListModel = new ListItemModel(StaticMapCellList.getInstance().getItemCollection((String) this._comboBoxCatelog.getSelectedItem()));
        this._contentList.setModel(itemListModel);
        this._contentList.setCellRenderer(new ListItemRender());
        this._contentList.setTransferHandler(new ListViewTransferHandler());
        this._contentList.setDragEnabled(true);
        this._comboBoxCatelog.addActionListener(new ComboBoxActionListener(this._contentList));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        _splitPane = new javax.swing.JSplitPane();
        _leftPanel = new javax.swing.JPanel();
        _comboBoxCatelog = new javax.swing.JComboBox();
        _contentScrollPane = new javax.swing.JScrollPane();
        _contentList = new javax.swing.JList();
        _rightPanel = new javax.swing.JPanel();
        _mainMenu = new javax.swing.JMenuBar();
        _fileMenu = new javax.swing.JMenu();
        _menuItemNew = new javax.swing.JMenuItem();
        _menuItemOpen = new javax.swing.JMenuItem();
        _menuItemSave = new javax.swing.JMenuItem();
        _editMenu = new javax.swing.JMenu();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setName("_mapFrame"); // NOI18N
        setResizable(false);

        _leftPanel.setBackground(new java.awt.Color(255, 102, 102));
        _leftPanel.setMinimumSize(new java.awt.Dimension(250, 0));

        _contentList.setDragEnabled(true);
        _contentScrollPane.setViewportView(_contentList);

        javax.swing.GroupLayout _leftPanelLayout = new javax.swing.GroupLayout(_leftPanel);
        _leftPanel.setLayout(_leftPanelLayout);
        _leftPanelLayout.setHorizontalGroup(
            _leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_comboBoxCatelog, javax.swing.GroupLayout.Alignment.TRAILING, 0, 250, Short.MAX_VALUE)
            .addGroup(_leftPanelLayout.createSequentialGroup()
                .addComponent(_contentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        _leftPanelLayout.setVerticalGroup(
            _leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(_leftPanelLayout.createSequentialGroup()
                .addComponent(_comboBoxCatelog, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_contentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                .addContainerGap())
        );

        _splitPane.setLeftComponent(_leftPanel);

        _rightPanel.setMaximumSize(new java.awt.Dimension(700, 700));
        _rightPanel.setMinimumSize(new java.awt.Dimension(700, 700));
        _rightPanel.setName(""); // NOI18N
        _rightPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout _rightPanelLayout = new javax.swing.GroupLayout(_rightPanel);
        _rightPanel.setLayout(_rightPanelLayout);
        _rightPanelLayout.setHorizontalGroup(
            _rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        _rightPanelLayout.setVerticalGroup(
            _rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );

        _splitPane.setRightComponent(_rightPanel);

        _fileMenu.setText("File");

        _menuItemNew.setText("New");
        _menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _menuItemNewActionPerformed(evt);
            }
        });
        _fileMenu.add(_menuItemNew);

        _menuItemOpen.setText("Open File..");
        _menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _menuItemOpenActionPerformed(evt);
            }
        });
        _fileMenu.add(_menuItemOpen);

        _menuItemSave.setText("Save");
        _menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _menuItemSaveActionPerformed(evt);
            }
        });
        _fileMenu.add(_menuItemSave);

        _mainMenu.add(_fileMenu);

        _editMenu.setText("Edit");
        _mainMenu.add(_editMenu);

        setJMenuBar(_mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 957, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * To do the new action performed.
     * First delete the old observers, then add the new observer.
     * The new observer is the new action performed in the map.
     * 
     * @param evt the command line arguments
     * @author yukywang
     */
    
    private void _menuItemNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event__menuItemNewActionPerformed
    {//GEN-HEADEREND:event__menuItemNewActionPerformed
        _mapSetDialog.setLocationRelativeTo(this);
        _mapSetDialog.setVisible(true);
        if (_mapModel != null)
        {
            _mapModel.deleteObservers();
        }
        _mapModel = new Map(_mapSetDialog.getRows(), _mapSetDialog.getCols());
        _mapModel.addObserver(_mapView);
        _mapView.setSize(70 * _mapSetDialog.getCols(), 70 * _mapSetDialog.getRows());
        _mapView.setMapModel(_mapModel);
        this.setTitle("Blank");
    }//GEN-LAST:event__menuItemNewActionPerformed

    /**
     * To open a file before save the actions.
     * If there is a map model, delete it and add the new observer.
     * 
     * @param evt the command line arguments
     * @author yukywang
     */
    
    private void _menuItemOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event__menuItemOpenActionPerformed
    {//GEN-HEADEREND:event__menuItemOpenActionPerformed
        String curDir = System.getProperty("user.dir");
        JFileChooser mapFileDialog = new JFileChooser(curDir + "/src/maps");
        mapFileDialog.setFileFilter(new FileNameExtensionFilter("Dungeon&Dragon File(*.dd)", "dd"));
        mapFileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        mapFileDialog.showOpenDialog(this);
        if (mapFileDialog.getSelectedFile() != null)
        {
            String fileName = mapFileDialog.getSelectedFile().getAbsolutePath();
            FileInputStream fis = null;
            ObjectInputStream in = null;
            try
            {
                fis = new FileInputStream(fileName);
                in = new ObjectInputStream(fis);
                if (_mapModel != null)
                {
                    _mapModel.deleteObservers();
                }
                _mapModel = (Map) in.readObject();
                in.close();
                this.setTitle(fileName);
                _mapModel.addObserver(_mapView);
                _mapView.setSize(70 * _mapModel.getMapCols(), 70 * _mapModel.getMapRows());
                _mapView.setMapModel(_mapModel);
                
            } catch (IOException ex)
            {
                ex.printStackTrace();
            } catch (ClassNotFoundException ex)
            {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event__menuItemOpenActionPerformed

    /**
     * To save the  new actions in the _menuItemSaveActionPerformed.
     * If the map model is not none and the validate map is not none, then do  
     * the save operation. 
     * 
     * @param evt the command line arguments
     * @author yukywang
     */
    private void _menuItemSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event__menuItemSaveActionPerformed
    {//GEN-HEADEREND:event__menuItemSaveActionPerformed
        StringBuffer msg = new StringBuffer("");
        if (_mapModel == null)
        {
            JOptionPane.showMessageDialog(null, "Please Open A File First", "Error", JOptionPane.ERROR_MESSAGE);
        } 
        else if (!_mapModel.validateMap(msg))
        {
            JOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
        } 
        else
        {
            String curDir = System.getProperty("user.dir");
            JFileChooser mapFileDialog = new JFileChooser(curDir + "/src/maps");
            mapFileDialog.setFileFilter(new FileNameExtensionFilter("Dungeon&Dragon File(*.dd)", "dd"));
            mapFileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
            mapFileDialog.showSaveDialog(this);
            if (mapFileDialog.getSelectedFile() != null)
            {
                String fileName = mapFileDialog.getSelectedFile().getAbsolutePath();
                FileOutputStream fos = null;
                ObjectOutputStream out = null;
                try
                {
                    if(fileName.indexOf('.') <= 0)
                    {
                        fileName += ".dd";
                    }
                    fos = new FileOutputStream(fileName);
                    out = new ObjectOutputStream(fos);
                    out.writeObject(_mapModel);
                    out.close();
                    this.setTitle(fileName);
                } catch (IOException ex)
                {
                    //ex.printStackTrace();
                } 

            }
        }
    }//GEN-LAST:event__menuItemSaveActionPerformed

    /**
     * main line of this project.
     * set the Nimbus look and feel. Create and display the form. 
     * 
     * @param args the command line arguments
     * @author yukywang
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                MapEditor mapEditor = new MapEditor();
                mapEditor.setLocationRelativeTo(null);
                mapEditor.setVisible(true);

            }
        });
    }
    private MapView jMapView;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox _comboBoxCatelog;
    private javax.swing.JList _contentList;
    private javax.swing.JScrollPane _contentScrollPane;
    private javax.swing.JMenu _editMenu;
    private javax.swing.JMenu _fileMenu;
    private javax.swing.JPanel _leftPanel;
    private javax.swing.JMenuBar _mainMenu;
    private javax.swing.JMenuItem _menuItemNew;
    private javax.swing.JMenuItem _menuItemOpen;
    private javax.swing.JMenuItem _menuItemSave;
    private javax.swing.JPanel _rightPanel;
    private javax.swing.JSplitPane _splitPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
