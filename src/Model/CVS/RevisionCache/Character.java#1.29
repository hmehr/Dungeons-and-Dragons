/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Model;

import Model.BodyParts.*;
import Model.Items.*;
import Model.Items.Item;
import Model.Map.MapCell;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.event.ListDataListener;
import Model.Dice;
import Model.OutputConsole;
import sun.swing.plaf.synth.Paint9Painter.PaintType;
/**
 * Character model class.
 * This class contents all the details of character/player. It remains alive as
 * long as the player is on the game.
 * @author m_niza
 * For build 2: we added variables for armor class, shield modifier, armor modifier, base attack bonus,
 * movement and movement left.
 * Created methods for all ability points, and modifier calculations.
 *
 * @author khushnuma
 * @version 1.2.0
 */
public class Character extends MapCell
{
    int _level;
    int _hitPoints;

    //Ability scores
    int _strength;
    int _dexterity;
    int _constitution;
    int _wisdom;
    int _intelligence;
    int _charisma;
    //
    int _modifier;//not needed but havent removed as i dont want to disrupt anything else
    int _damageBonus;//not needed but havent removed as i dont want to disrupt anything else
    
    //int _attackBonus;//changed by khushnuma
    int _baseAttackBonus;//added by khush
    int _rangeAttackBonus;//added by khush
    int _meleeAttackBonus;//added by khush
    int _armorClass;//added by khush
    int _armorModifier;//added by khush
    int _shieldModifier;//added by khush
    int _attackPerRound;//added by khush
    int _attackLeftPerRound; //added by khush
    //movement variables
    int _movement;//added by khush
    int _movementLeft; //added by khush

    int _healingPotion;
    String _name;
    String _avatar;
    String _type;
    
    ArmorType _armorType;
    ShieldType _shieldType;//added by khush
    CharacterType _characterType;

    DefaultListModel _inventoryList;
    DefaultListModel _backpackList;
    DefaultComboBoxModel _dfc;
    /**
     * It's a list of body parts where all the body part of player is assigned in
     * the index.
     */
    public ArrayList<BodyPart> _bodyArray;
    ArrayList<Item> _backpackItem;
    ArrayList<Item> _inventroyItem;

    /**
     * The constructor initializes all the properties of the character with a value
     * which may be changed later in runtime during the play.
     */
    public Character()
    {        
//        if(pType.equals(pType.BULLY))
//        {
//            _type = "Bully Player";
//        }
//        if(pType.equals(pType.NIMBLE))
//        {
//            _type = "Nimble Player";
//        }
//        if(pType.equals(pType.TANK))
//        {
//            _type = "Tank Player";
//        }
        _name = "Default Character";
        _level = 1;
        _strength = 0;//changed by khush
        _dexterity = 0;//changed by khush
        _constitution = 0;//changed by khush
        _wisdom = 0;//changed by khush
        _intelligence = 0;//changed by khush
        _charisma = 0;//changed by khush
        _modifier = 0;//changed by khush
        _damageBonus = 0;
        //_attackBonus = 1; //changed by khush

        _baseAttackBonus = 1;
        _armorClass = 10;//added by khush
        _armorModifier = 0;//added by khush
        _shieldModifier = 0;//added by khush
        _attackPerRound = 1;//added by khush
        _attackLeftPerRound = 1;//added by khush
        //movement variables
        _movement = 6;//added by khush
        _movementLeft =6; //added by khush

        _healingPotion = 20; //it will increase hitpoints by 20
        _hitPoints = 100;       

        //added by khush
        calculateAttackBonus();
        
        _bodyArray = new ArrayList<BodyPart>();
        _dfc = new DefaultComboBoxModel();
        _inventroyItem = new ArrayList<Item>();
        _backpackItem = new ArrayList<Item>();
        _inventoryList = new DefaultListModel();
        _backpackList = new DefaultListModel();
    }

     /**
      * Name of the Player in the game.
      * @return It returns the name of the character
      */
    public String getName()
    {
        return _name;
    }

    /**
     * To get the player image, which is set as Avatar.
     * @return It returns the image file location path of the player Avatar.
     */
    public String getAvatar()
    {
        return _avatar;
    }

    /**
     * It's a property of a player ability.
     * @return _charisma returns the charisma score of the player (format intger).
     */
    public int getCharisma()
    {
        return _charisma;
    }

    /**
     * It's a property of a player ability.
     * @return _constitution returns the constitution score of the player (format intger).
     */    
    public int getConstitution()
    {
        return _constitution;
    }

    /**
     * It's a property of a player ability.
     * @return _dexterity returns the dexterity score of the player (format intger).
     */
    public int getDexterity()
    {
        return _dexterity;
    }

    /**
     * It's a property of a player ability.
     * @return _intelligence returns the intelligence score of the player (format intger).
     */
    public int getIntelligence()
    {
        return _intelligence;
    }

    /**
     * It's a property of a player ability.
     * @return _strength returns the strength score of the player (format intger).
     */
    public int getStrength()
    {
        return _strength;

    }

    /**
     * It's a property of a player ability.
     * @return _wisdom returns the wisdom score of the player (format intger).
     */
    public int getWisdom()
    {
        return _wisdom;
    }

    /**
     * It's a bonus for a player performance.
     * @return _damageBonus returns the damageBonus score of the player (format integer).
     */
    public int getDamageBonus()
    {
        return _damageBonus;
    }

    /**
     * Basically it indicates the ability of a player to absorb the hit from
     * a monster. It is in fact the life of a player.
     * @return _attackBonus returns the attackBonus score of the player (format integer).
     */    
    public int getHitPoints()
    {
        return _hitPoints;
    }

    /**
     * It's the level of a player achieved based on performance.
     * @return _attackBonus returns the attackBonus score of the player (format intger).
     */
    public int getLevel()
    {
        return _level;
    }

    public CharacterType getCharacterType()
    {
        return _characterType;
    }

    

    /**
     * Healing Potion is used to increase the Hit Point, i.e., the life of the
     * player.
     * @return It returns the vale of a potion, by which the hit point will increase.
     */
    public int getHealingPotion()
    {
        return _healingPotion;
    }

    /**
     * It's a property of a player ability.
     * @param pConstitution sets the constitution of the player (format intger).
     */

    /**
     * This method sets the image of the avatar.
     * @param pAvatar Path of the image location of the avatar.
     */

    public void setAvatar(String pAvatar)
    {
        this._avatar = pAvatar;
    }

    /**
     * It's a property of a player ability.
     * @param pCharisma sets the charisma of the player (format intger).
     */
    public void setCharisma(int pCharisma)
    {
        this._charisma = pCharisma;
        OutputConsole.GetOutputConsoleInstance().Write("Charisma: "+_charisma );
    }    

    public void setConstitution(int pConstitution)
    {
        this._constitution = pConstitution;
        OutputConsole.GetOutputConsoleInstance().Write("Constitution: "+_constitution );
    }

    /**
     * Setter method for players dexterity.
     * It's a property of a player ability that affects both the armor class and the range attack bonus.
     * @param pDexterity sets the constitution of the player (format integer).
     * modified by khushnuma for build 2
     */    
    public void setDexterity(int pDexterity)
    {
        this._dexterity = pDexterity;
        OutputConsole.GetOutputConsoleInstance().Write("Charisma: "+_dexterity );
        calculateArmorClass();//added by khush
        calculateAttackBonus();//added by khushnuma
    }

    /**
     * It's a property of a player ability.
     * @param pIntelligence sets the intelligence of the player (format intger).
     */
    public void setIntelligence(int pIntelligence)
    {
        this._intelligence = pIntelligence;
        OutputConsole.GetOutputConsoleInstance().Write("Intelligence: "+_intelligence );
    }

    /**
     * It's the name of the player, which is set at the beginning of the game.
     * @param pName sets the name of the player.
     */
    public void setName(String pName)
    {
        this._name = pName;
    }

    public void setType(CharacterType pType)
    {
        _characterType = pType;
    }

    /**
     * Setter method for players strength
     * It's a property of a player ability.it affects the players attack bonus for melee weapons.
     * @param pStrength sets the strength of the player (format integer).
     * @khushnuma modified it for build 2
     */
    public void setStrength(int pStrength)
    {
        this._strength = pStrength;
        OutputConsole.GetOutputConsoleInstance().Write("Strength: "+_strength );
        calculateAttackBonus();//addded by khushnuma
    }

    /**
     * It's a property of a player ability.
     * @param pWisdom sets the wisdom of the player (format integer).
     */
    public void setWisdom(int pWisdom)
    {
        this._wisdom = pWisdom;
        OutputConsole.GetOutputConsoleInstance().Write("Wisdom: "+_wisdom );
    }

    /**
     * Basically it indicates the ability of a player to absorb the hit from
     * a monster. It is in fact the life of a player.
     * @param pHitPoints sets the hit point score of the player at the begining of the game (format integer).
     */
    public void setHitPoints(int pHitPoints)
    {
        this._hitPoints = pHitPoints;
        OutputConsole.GetOutputConsoleInstance().Write("HitPoints: "+_hitPoints );
    }

    /**
     * It is the backpack of items kept real time in the game.
     * @return It returns the backpack list of items used in the game.
     */
    public ArrayList<Item> getBackPack()
    {
        return _backpackItem;
    }    

    /**
     * This method creates the body parts of the player. Each body parts can be associated with
     * an Item during the play. Each body part is kept in a particular index in the list.
     * <p>
     * head --> 0
     * upper_body --> 1
     * left_hand --> 2
     * right_hand --> 3
     * finger --> 4
     * waist --> 5
     * feet --> 6
     */
    public void createBodyParts()
    {        
        UpperBody upper_body = new UpperBody();                
        RightHand right_hand = new RightHand();
        LeftHand left_hand = new LeftHand();
        Head head = new Head();
        Feet feet = new Feet();
        Finger finger = new Finger();
        Waist waist = new Waist();

        _bodyArray.add(head); //0
        _bodyArray.add(upper_body); //1
        _bodyArray.add(left_hand); //2
        _bodyArray.add(right_hand); //3
        _bodyArray.add(finger); //4
        _bodyArray.add(waist); //5
        _bodyArray.add(feet); //6
                
        for(int i = 0; i< _bodyArray.size(); i++)
        {            
            _dfc.addElement(_bodyArray.get(i).getName());            
        }                
    }

    /**
     * createInventoryItems() method creates the Item by default at the beginging
     * of the game and keeps those into inventory list. It also initializes the default
     * list model to populate the JList in the view.
     * @author khushnuma
     * @version 1.2.0
     * changed for build 2 to include different armor and shields etc
     */
    public void createInventoryItems()
    {
        //commented out by khush
//        Armor armor_heavy = new Armor(_armorType.HEAVY);
//        Armor armor_medium = new Armor(_armorType.MEDIUM);
//        Armor armor_light = new Armor(_armorType.LIGHT);

        //added by khush
        Armor armor_padded = new Armor (_armorType.PADDED);
        Armor armor_bandedMail = new Armor (_armorType.BANDEDMAIL);
        Armor armor_breastPlate = new Armor (_armorType.BREASTPLATE);
        Armor armor_chainShirt = new Armor (_armorType.CHAINSHIRT);
        Armor armor_fullPlate = new Armor (_armorType.FULLPLATE);
        Armor armor_halfPlate = new Armor (_armorType.HALFPLATE);
        Armor armor_leather = new Armor (_armorType.LEATHER);
        Armor armor_studdedLeather = new Armor (_armorType.STUDDEDLEATHER);
        
//commented out by khush
//        Shield shield = new Shield();

        //added by khush
        Shield shield_buckler = new Shield(_shieldType.BUCKLER);
        Shield shield_heavyShield = new Shield(_shieldType.HEAVYSHIELD);
        Shield shield_towerShield = new Shield(_shieldType.TOWERSHIELD);

        
        HealingPotion heal_potion = new HealingPotion();

        LongSword long_sword = new LongSword();
        LongBow long_bow = new LongBow();

        Belt belt = new Belt();
        Helmet helmet = new Helmet();
        Ring ring = new Ring();
        Boot boot = new Boot();

        long_sword.setIsMelee(true);        
        long_bow.setIsLongRange(true);
        
        //commented out by khush
//        _inventroyItem.add(armor_heavy);
//        _inventroyItem.add(armor_medium);
//        _inventroyItem.add(armor_light);
//        _inventroyItem.add(shield);

        //added by khush
        _inventroyItem.add(shield_buckler);
        _inventroyItem.add(shield_towerShield);
        _inventroyItem.add(shield_heavyShield);
        _inventroyItem.add(armor_padded);
        _inventroyItem.add(armor_leather);
        _inventroyItem.add(armor_studdedLeather);
        _inventroyItem.add(armor_fullPlate);
        _inventroyItem.add(armor_halfPlate);
        _inventroyItem.add(armor_chainShirt);
        _inventroyItem.add(armor_breastPlate);
        _inventroyItem.add(armor_bandedMail);

        _inventroyItem.add(heal_potion);
        _inventroyItem.add(long_sword);
        _inventroyItem.add(long_bow);
        _inventroyItem.add(belt);
        _inventroyItem.add(helmet);
        _inventroyItem.add(ring);
        _inventroyItem.add(boot);

        //populating the DefaultListModel.
        for(int i = 0; i < _inventroyItem.size(); i++)
            _inventoryList.addElement(_inventroyItem.get(i).getName());
    }

    /**
     * This method adds an item to the backpack and into the DefaultModelList, which
     * will update the backpack item list and DefaultListModel (for JList).
     * @param pItem It is the reference for the item.
     */
    public void addBackpackItems(Item pItem)
    {
        _backpackItem.add(pItem);
        _backpackList.addElement(pItem.getName());
    }

    /**
     * It will return DefaultComboBoxModel to populate JCombobox.
     * @return It returns the list for body parts.
     */
    public DefaultComboBoxModel getBodyPartsName()
    {        
        return _dfc;
    }

    /**
     * It will return the inventory items of the character.
     * @return It returns the list for inventory items.
     */
    public ArrayList<Item> getInventroyItem()
    {
        return _inventroyItem;
    }

    /**
     * It will return DefaultLisModel to populate JList.
     * @return It will return a DefaultListModel for jList.
     */
    public DefaultListModel getInventoryList()
    {
        return _inventoryList;
    }

    /**
     * It will return DefaultLisModel to populate JList.
     * @return It will return a DefaultListModel for jList.
     */
    public DefaultListModel getBackpackList()
    {
        return _backpackList;
    }    

    /**
     * It will check the overlap while player moves/travels throughout the map.
     * @return It returns boolean.
     */
    @Override
    public boolean canOverlap()
    {
        return true;
    }
/**
 * Getter method to get value of armor class
 * @return
 */
    public int getArmorClass() {
        return _armorClass;
    }

    public void calculateArmorClass() {
        int dexterityModifier = calculateModifier(_dexterity);
        this._armorClass = 10+ _armorModifier + _shieldModifier + dexterityModifier;
        OutputConsole.GetOutputConsoleInstance().Write("AC = 10 + am + sm + dexMod: 10+ "+ _armorModifier +" + "+_shieldModifier+ " + "+ dexterityModifier);
        OutputConsole.GetOutputConsoleInstance().Write("AC: "+_armorClass );
    }

    public int getArmorModifier() {
        return _armorModifier;
    }

    public void setArmorModifier(int _armorModifier) {
        this._armorModifier = _armorModifier;
        OutputConsole.GetOutputConsoleInstance().Write("ArmorModifier: "+_armorModifier );
        calculateArmorClass();
    }
/**
 * getter method for shield modifier currently held by player
 * @return _shieldModifier is shield modifier value
 * @author khushnuma
 */
    public int getShieldModifier() {
        return _shieldModifier;
    }
/**
 * Setter method for shield modifier. Set to the value in shield depending on which shield was worn.
 * @param _shieldModifier is value of shield modifier.
 */
    public void setShieldModifier(int _shieldModifier) {
        this._shieldModifier = _shieldModifier;
        OutputConsole.GetOutputConsoleInstance().Write("ShieldModifier: "+_shieldModifier );
        calculateArmorClass();
    }
/**
 * Getter method to show the total number of movements available to player per turn
 * @return _movement is the total number of movements available to player per turn
 */
    public int getMovement() {
        return _movement;
    }

/**
 * Getter method to show the number of player movements left in a given turn.
 * @return _movementLeft is movement left in turn
 * @author khushnuma
 */
    public int getMovementLeft() {
        return _movementLeft;
    }
/**
 * Setter method to reduce the number of movements available or left to player at each turn.
 * It should be reset to 6 at beginning of each turn.
 * @param _movementLeft is movement left in turn
 * @author khushnuma
 */
    public void setMovementLeft(int _movementLeft) {
        this._movementLeft = _movementLeft;
        OutputConsole.GetOutputConsoleInstance().Write("Movement Left: "+_movementLeft );
    }
/**
 * Getter method for seeing a players base attack bonus for a given level.
 * @return
 */
    public int getBaseAttackBonus() {
        return _baseAttackBonus;
    }
///**
// * method to calculate the base attack bonus of a player on a  per level basis.
// * It assumes that the players level is first changed and then this function is called.
// * @author khushnuma
// * @version 1.0.0
// */
//    public void calculateBaseAttackBonus() {
//        //level dependant characteristic ..we assume level is changed first.
//        if(_level > 0 && _level < 21){
//            switch (_level){
//              case  1:
//                  _baseAttackBonus = 1;
//                  break;
//              case  2:
//                  _baseAttackBonus = 2;
//                  break;
//              case  3:
//                  _baseAttackBonus = 3;
//                  break;
//              case  4:
//                  _baseAttackBonus = 4;
//                  break;
//              case  5:
//                  _baseAttackBonus = 5;
//                  break;
//              case  6:
//                  _baseAttackBonus = 6 +1;
//                  break;
//              case  7:
//                  _baseAttackBonus = 7+2;
//                  break;
//              case  8:
//                  _baseAttackBonus = 8+3;
//                  break;
//              case  9:
//                  _baseAttackBonus = 9+4;
//                  break;
//              case  10:
//                  _baseAttackBonus = 10+5;
//                  break;
//              case  11:
//                  _baseAttackBonus = 11+6+1;
//                  break;
//              case  12:
//                  _baseAttackBonus = 12+7+2;
//                  break;
//              case  13:
//                  _baseAttackBonus = 13+8+3;
//                  break;
//              case  14:
//                  _baseAttackBonus = 14+9+4;
//                  break;
//              case  15:
//                  _baseAttackBonus = 15+10+5;
//                  break;
//              case  16:
//                  _baseAttackBonus = 16+11+6+1;
//                  break;
//              case  17:
//                  _baseAttackBonus = 17+12+7+2;
//                  break;
//              case  18:
//                  _baseAttackBonus = 18+13+8+3;
//                  break;
//              case  19:
//                  _baseAttackBonus = 19+14+9+4;
//                  break;
//              case  20:
//                  _baseAttackBonus = 20+15+10+5;
//                  break;
//            }//end switch
//        }//end if
//        calculateAttackBonus();///calculates both range and melee attack bonus values
//    }
    /**
     * It's a bonus for a player performance used when attacking a monster with meele weapon.
     * @return _rangeAttackBonus returns the range attack Bonus score of the player (format integer).
     * @author khushnuma
     * @version 1.0.0
     */
    public int getMeleeAttackBonus()
    {
        return _meleeAttackBonus;
    }
    /**
     * It's a bonus for a player performance used when attacking a monster with range weapon.
     * @return _rangeAttackBonus returns the range attack Bonus score of the player (format integer).
     * @author khushnuma
     * @version 1.0.0
     */
    public int getRangeAttackBonus()
    {
        return _rangeAttackBonus;
    }
/**
 * method to set the level of a player.
 * @param plevel is the level of the player. It assumes that level is being incremented by one each time.
 * @author khushnuma modified it for build 2
 */
    public void setLevel(int plevel) {
        this._level = plevel;
        ///calculateBaseAttackBonus();//change players base attack bonus
        calculateHitPoint();//calculate hit points incremented per level increase
        calculateAttackPerRound();
        //calculateAttackBonus();not needed as that function automatically called from inside calculateBaseAttackBonus()
    }
/**
 * method to add to the level of a player by 1.
 * @param plevel is the level of the player. It assumes that level is being incremented by one each time.
 * @author khushnuma added it for build 2
 */
    public void addLevel(){
        if(_level <20){
        this._level = this._level +1;
        OutputConsole.GetOutputConsoleInstance().Write("Level: "+_level );
        this._baseAttackBonus = this._level;
        OutputConsole.GetOutputConsoleInstance().Write("Base Attack Bonus: "+_baseAttackBonus );
        calculateAttackBonus();//add hit point
        calculateHitPoint();
        calculateAttackPerRound();
        }
    }
/**
 * method to minus to the level of a player by 1.
 * @param plevel is the level of the player. It assumes that level is being decremented by one each time.
 * @author khushnuma added it for build 2
 * @version 1.0.0
 */
    public void minusLevel(){
        if(_level >1){
            this._level = this._level -1;
            OutputConsole.GetOutputConsoleInstance().Write("Level: "+_level );
            this._baseAttackBonus = this._level;
            OutputConsole.GetOutputConsoleInstance().Write("Base Attack Bonus: "+_baseAttackBonus );
            calculateAttackBonus();
            reduceHitPoint();
            calculateAttackPerRound();
        }
    }
    /**
     * Method to reduce a players hit points when they go down a level from the player editor.
     * @author khushnuma added it for build 2
     * @version 1.0.0
     */
    public void reduceHitPoint(){
        int diceValue = Dice.d10Dice();
        int constitutionModifier = calculateModifier(_constitution);
        int changeValue = diceValue + constitutionModifier;
        OutputConsole.GetOutputConsoleInstance().Write("HitPoint before reduction: "+_hitPoints );
        OutputConsole.GetOutputConsoleInstance().Write("HitPoint Reduction By( 1d10 + constitMod): "+diceValue + constitutionModifier );
        this._hitPoints = this._hitPoints - changeValue;
        OutputConsole.GetOutputConsoleInstance().Write("HitPoint after reduction: "+_hitPoints );
    }
/**
 * Method to calculate the ability modifier for a given ability point according to the rules.
 * @author khushnuma
 * @param pAbilityScore is the ability score of the given ability
 * @return abilityModifer is the ability modifier for the ability score pAbilityScore.
 * @version 1.0.0
 */
    public int calculateModifier(int pAbilityScore) {
        int abilityModifer;
        if(pAbilityScore==0 ||pAbilityScore ==1){
            abilityModifer = -5;
        }
        else if(pAbilityScore==2 ||pAbilityScore ==3){
            abilityModifer = -4;
        }
        else if(pAbilityScore==4 ||pAbilityScore ==5){
            abilityModifer = -3;
        }
        else if(pAbilityScore==6 ||pAbilityScore ==7){
            abilityModifer = -2;
        }
        else if(pAbilityScore==8 ||pAbilityScore ==9){
            abilityModifer = -1;
        }
        else if(pAbilityScore==10 ||pAbilityScore ==11){
            abilityModifer = 0;
        }
        else {
            int temp = pAbilityScore -11;
            int q= temp /2;
            int r = temp % 2;
            abilityModifer = q+ r;
        }
        return abilityModifer;
    }//end method calculate ability modifier
/**
 * getter method for attacks per round available to player
 * @return _attackPerRound is attacks per round.
 * @author khushnuma
 * @version 1.0.0
 */
    public int getAttackPerRound() {
        return _attackPerRound;
    }
/**
 * getter method to show number of attacks left in that round / turn of a player.
 * max attack per round is level dependant and stored in variable _attackPerRound.
 * @return  _attackLeftPerRound number of attacks left in that round / turn of a player.
 * @author khushnuma
 * @version 1.0.0
 */
    public int getAttackLeftPerRound() {
        return _attackLeftPerRound;
    }
    /**
     * Method to decrement the attack left per round/ turn of a player.
     * @author khushnuma
     * @version 1.0.0
     */
    public void minusAttackPerRound(){
        _attackLeftPerRound = _attackLeftPerRound -1;
        reduceBaseAttackBonus();
    }
    /**
     * Method to decrement the movement left or available to a player by 1 during the players turn / move.
     * @author khushnuma
     * @versin 1.0.0
     */
    public void minusMovementLeft(){
        _movementLeft = _movementLeft -1;
        OutputConsole.GetOutputConsoleInstance().Write("Movement Left in turn: "+ _movementLeft);
    }
/**
 * method executed at the end of each players turn that will reset the players values for
 * available movements, base attack bonus and attacks per round in time for his next turn.
 * @author khushnuma
 * @version 1.0.0
 */
    public void endOfTurn(){
        _baseAttackBonus = _level;
        calculateAttackBonus();
        _attackLeftPerRound = _attackPerRound;
        _movementLeft = _movement;
    }
    /**
     * Method to recalculate the base attack bonus of a player during his turn. This is required as he can have
     * more than one attack in one turn depending on his level. But his base attack bonus reduces with each
     * consecutive attack.
     * @author khushnuma
     * @version 1.0.0
     */
    public void reduceBaseAttackBonus(){
    //do this per level
        switch(_level){
            case 1:
                if(_attackLeftPerRound == 0){
                    _baseAttackBonus = 0;
                }
                break;
            case 2:
                if(_attackLeftPerRound == 0){
                    _baseAttackBonus = 0;
                }
                break;
            case 3:
                if(_attackLeftPerRound == 0){
                    _baseAttackBonus = 0;
                }
                break;
            case 4: 
                if(_attackLeftPerRound == 0){
                    _baseAttackBonus = 0;
                }
                break;
            case 5:
                if(_attackLeftPerRound == 0){
                    _baseAttackBonus = 0;
                }
                break;
            case 6:
                if(_attackLeftPerRound == 1){
                    _baseAttackBonus =1;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 7:
                if(_attackLeftPerRound == 1){
                    _baseAttackBonus =2;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 8:
                if(_attackLeftPerRound == 1){
                    _baseAttackBonus =3;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 9:
                if(_attackLeftPerRound == 1){
                    _baseAttackBonus =4;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 10:
                if(_attackLeftPerRound == 1){
                    _baseAttackBonus =5;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
                
            case 11:
                if(_attackLeftPerRound == 2){
                    _baseAttackBonus =6;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =1;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 12:
                if(_attackLeftPerRound == 2){
                    _baseAttackBonus =7;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =2;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 13:
                if(_attackLeftPerRound == 2){
                    _baseAttackBonus =8;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =3;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 14:
                if(_attackLeftPerRound == 2){
                    _baseAttackBonus =9;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =4;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 15:
                if(_attackLeftPerRound == 2){
                    _baseAttackBonus =10;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =5;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 16:
                if(_attackLeftPerRound == 3) {
                    _baseAttackBonus =11;
                }
                else if(_attackLeftPerRound == 2) {
                    _baseAttackBonus =6;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =1;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 17:
                if(_attackLeftPerRound == 3) {
                    _baseAttackBonus =12;
                }
                else if(_attackLeftPerRound == 2) {
                    _baseAttackBonus =7;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =2;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 18:
                if(_attackLeftPerRound == 3) {
                    _baseAttackBonus =13;
                }
                else if(_attackLeftPerRound == 2) {
                    _baseAttackBonus =8;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =3;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 19:
                if(_attackLeftPerRound == 3) {
                    _baseAttackBonus =14;
                }
                else if(_attackLeftPerRound == 2) {
                    _baseAttackBonus =9;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =4;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                break;
            case 20:
                if(_attackLeftPerRound == 3) {
                    _baseAttackBonus =15;
                }
                else if(_attackLeftPerRound == 2) {
                    _baseAttackBonus =10;
                }
                else if(_attackLeftPerRound == 1) {
                    _baseAttackBonus =5;
                }
                else if(_attackLeftPerRound == 0) {
                    _baseAttackBonus = 0;
                }
                 break;
        }//end switch
        OutputConsole.GetOutputConsoleInstance().Write("Reduced base Attack Bonus: "+_baseAttackBonus);
        calculateAttackBonus();
    }

/**
 * method too calculate the number of attacks per round available to the player.
 * it changes on a per level basis.
 * @author khushnuma
 * @version 1.0.0
 */
    public void calculateAttackPerRound(){
    //do this per level
        switch(_level){
            case 1:
            case 2:
            case 3:
            case 4:               
            case 5:
                 _attackPerRound = 1;
                 _attackLeftPerRound =1;
                 break;
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                _attackPerRound = 2;
                _attackLeftPerRound =2; break;
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
                _attackPerRound = 3;
                _attackLeftPerRound =3;
                break;
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
                _attackPerRound = 4;
                _attackLeftPerRound =4;
                break;
        }//end switch
        OutputConsole.GetOutputConsoleInstance().Write("Attack per Round: "+_attackPerRound );
        OutputConsole.GetOutputConsoleInstance().Write("Attack Left per Round: "+_attackLeftPerRound);
    }
/**
 * Method to calculate the range and melee attack bonus for a player.
 * These values are used during attacks by the player. They are both dependant on
 * the base attack bonus which is itself dependant on the player level.
 * @author khushnuma
 * @version 1.0.0
 */
    private void calculateAttackBonus() {
        _rangeAttackBonus = _baseAttackBonus + calculateModifier(_dexterity);
        OutputConsole.GetOutputConsoleInstance().Write("Range AB = Base AB + dexMod: "+_baseAttackBonus+" + "+ calculateModifier(_dexterity));
        OutputConsole.GetOutputConsoleInstance().Write("Range AB: "+ _rangeAttackBonus);
        _meleeAttackBonus = _baseAttackBonus + calculateModifier(_strength);
        OutputConsole.GetOutputConsoleInstance().Write("Melee AB = Base AB + strengthMod: "+_baseAttackBonus+" + "+ calculateModifier(_strength));
        OutputConsole.GetOutputConsoleInstance().Write("Melee AB: "+ _meleeAttackBonus);
    }
/**
 * this method calculates the hit points made available to a player depending on
 * his constitution modifier, a random dice value from d10 dice and his earlier hit points.
 * it changes when player level changes by one. It is internally called by the addLevel method.
 * @author khushnuma
 * @version 1.0.0
 */
    private void calculateHitPoint() {
        int diceValue = Dice.d10Dice();
        _hitPoints = _hitPoints + (diceValue+ calculateModifier(_constitution));
        OutputConsole.GetOutputConsoleInstance().Write("Addition Factor to HitPoints = 1d10 + constitMod: " +diceValue+" + "+calculateModifier(_constitution));
        OutputConsole.GetOutputConsoleInstance().Write("HitPoints: "+_hitPoints );
    }


}//end class
